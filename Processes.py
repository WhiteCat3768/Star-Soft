import math  # Использована для частичного упрощения вычислений.
import numpy as np  # Использована для частичного упрощения вычислений.
#from numba import njit

from World_constants import Worldconstants as Wc  # Импорт класса, содержащего мировые константы.

from Element_operations import *
from Differentials_solving_methods import *

N_a = 6.022e+23


def process_1(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'H1', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'H2', '0', '0', '0'}:
        if T9 <= 0:
            return (4.08 * 10 ** (-15) * T9 ** (-2 / 3) * np.exp(-3.381 * T9 ** (-1 / 3)) * (1 + 3.82 * T9 + 1.51 * T9 ** 2 + 0.144 * T9 ** 3 - 1.14 * 10 ** (-2) * T9 ** 4)) / (N_a)
        return (4.08 * 10 ** (-15) * T9 ** (-2 / 3) * np.exp(-3.381 * T9 ** (-1 / 3)) * (1 + 3.82 * T9 + 1.51 * T9 ** 2 + 0.144 * T9 ** 3 - 1.14 * 10 ** (-2) * T9 ** 4)) / (N_a)
    return -1


def process_2(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'H2', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'He3', '0', '0', '0'}:
        if T9 <= 0.11:
            return (1.81 * 10 ** 3 * T9 ** (-2 / 3) * np.exp(-3.721 * T9 ** (-1 / 3)) * (1 + 14.3 * T9 - 90.5 * T9 ** 2 + 395 * T9 ** 3)) / (N_a)
        return (2.58 * 10 ** 3 * T9 ** (-2 / 3) * np.exp(-3.721 * T9 ** (-1 / 3)) * (1 + 3.96 * T9 + 0.116 * T9 ** 2)) / (N_a)
    return -1


def process_3(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'H2', 'H2', '0'} and {Res1, Res2, Res3, Res4} == {'He4', '0', '0', '0'}:
        if T9 <= 0:
            return (42.1 * T9 ** (-2 / 3) * np.exp(-4.259 * T9 ** (-1 / 3)) * (1 + 0.514 * T9 + 0.339 * T9 ** 2 - 1.18 * 10 ** (-2) * T9 ** 3)) / (N_a)
        return (42.1 * T9 ** (-2 / 3) * np.exp(-4.259 * T9 ** (-1 / 3)) * (1 + 0.514 * T9 + 0.339 * T9 ** 2 - 1.18 * 10 ** (-2) * T9 ** 3)) / (N_a)
    return -1


def process_4(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'H2', 'H2', '0'} and {Res1, Res2, Res3, Res4} == {'He3', 'H1', '0', '0'}:
        if T9 <= 0:
            return (4.67 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-4.259 * T9 ** (-1 / 3)) * (1 + 1.079 * T9 - 0.1124 * T9 ** 2 + 5.68 * 10 ** (-3) * T9 ** 3)) / (N_a)
        return (4.67 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-4.259 * T9 ** (-1 / 3)) * (1 + 1.079 * T9 - 0.1124 * T9 ** 2 + 5.68 * 10 ** (-3) * T9 ** 3)) / (N_a)
    return -1


def process_5(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'H2', 'H2', '0'} and {Res1, Res2, Res3, Res4} == {'H3', 'H1', '0', '0'}:
        if T9 <= 0:
            return (4.66 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-4.259 * T9 ** (-1 / 3)) * (1 + 0.759 * T9 - 0.0612 * T9 ** 2 + 2.78 * 10 ** (-3) * T9 ** 3)) / (N_a)
        return (4.66 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-4.259 * T9 ** (-1 / 3)) * (1 + 0.759 * T9 - 0.0612 * T9 ** 2 + 2.78 * 10 ** (-3) * T9 ** 3)) / (N_a)
    return -1


def process_6(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'H2', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Li6', '0', '0', '0'}:
        if T9 <= 0:
            return (14.82 * T9 ** (-2 / 3) * np.exp(-7.435 * T9 ** (-1 / 3)) * (1 + 6.572 * T9 + 0.076 * T9 ** 2 + 0.0248 * T9 ** 3) + 82.8 * T9 ** (-3 / 2) * np.exp(-7.904 / T9)) / (N_a)
        return (14.82 * T9 ** (-2 / 3) * np.exp(-7.435 * T9 ** (-1 / 3)) * (1 + 6.572 * T9 + 0.076 * T9 ** 2 + 0.0248 * T9 ** 3) + 82.8 * T9 ** (-3 / 2) * np.exp(-7.904 / T9)) / (N_a)
    return -1


def process_7(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'H3', 'H2', '0'} and {Res1, Res2, Res3, Res4} == {'He4', 'H1', '0', '0'}:
        if T9 <= 0:
            return (8.29 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-4.524 * T9 ** (-1 / 3) - (T9 / 0.08) ** 2) * (1 + 17.2 * T9 + 175 * T9 ** 2) + 8.12 * 10 ** 8 * T9 ** (-0.712) * np.exp(-0.506 / T9)) / (N_a)
        return (8.29 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-4.524 * T9 ** (-1 / 3) - (T9 / 0.08) ** 2) * (1 + 17.2 * T9 + 175 * T9 ** 2) + 8.12 * 10 ** 8 * T9 ** (-0.712) * np.exp(-0.506 / T9)) / (N_a)
    return -1


def process_8(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'H3', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Li7', '0', '0', '0'}:
        if T9 <= 0:
            return (8.20 * 10 ** 5 * T9 ** (-2 / 3) * np.exp(-8.081 * T9 ** (-1 / 3)) * (1 - 0.389 * T9 + 0.134 * T9 ** 2 - 1.81 * 10 ** (-2) * T9 ** 3 + 9.23 * 10 ** (-4) * T9 ** 4)) / (N_a)
        return (8.20 * 10 ** 5 * T9 ** (-2 / 3) * np.exp(-8.081 * T9 ** (-1 / 3)) * (1 - 0.389 * T9 + 0.134 * T9 ** 2 - 1.81 * 10 ** (-2) * T9 ** 3 + 9.23 * 10 ** (-4) * T9 ** 4)) / (N_a)
    return -1


def process_9(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'He3', 'He3', '0'} and {Res1, Res2, Res3, Res4} == {'He4', 'H1', 'H1', '0'}:
        if T9 <= 0:
            return (5.59 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-12.277 * T9 ** (-1 / 3)) * (1 - 0.135 * T9 + 2.54 * 10 ** (-2) * T9 ** 2 - 1.29 * 10 ** (-3) * T9 ** 3)) / (N_a)
        return (5.59 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-12.277 * T9 ** (-1 / 3)) * (1 - 0.135 * T9 + 2.54 * 10 ** (-2) * T9 ** 2 - 1.29 * 10 ** (-3) * T9 ** 3)) / (N_a)
    return -1


def process_10(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'He3', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Be7', '0', '0', '0'}:
        if T9 <= 0:
            return (5.46 * 10 ** 6 * T9 ** (-2 / 3) * np.exp(-12.827 * T9 ** (-1 / 3)) * (1 - 0.307 * T9 + 8.81 * 10 ** (-2) * T9 ** 2 - 1.06 * 10 ** (-2) * T9 ** 3 + 4.46 * 10 ** (-4) * T9 ** 4)) / (N_a)
        return (5.46 * 10 ** 6 * T9 ** (-2 / 3) * np.exp(-12.827 * T9 ** (-1 / 3)) * (1 - 0.307 * T9 + 8.81 * 10 ** (-2) * T9 ** 2 - 1.06 * 10 ** (-2) * T9 ** 3 + 4.46 * 10 ** (-4) * T9 ** 4)) / (N_a)
    return -1


def process_11(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'He4', 'He4', 'n0'} and {Res1, Res2, Res3, Res4} == {'Be9', '0', '0', '0'}:
        if T9 <= 0.03:
            return ((2.43 * 10 ** 9 * T9 ** (-2 / 3) * np.exp(-13.490 * T9 ** (-1 / 3) - (T9 / 0.15) ** 2) * (1 + 74.5 * T9) + 6.09 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-1.054 / T9)) * 6.69 * 10 ** (-12) * (1 - 192 * T9 + 2.48 * 10 ** (4) * T9 ** (2) - 1.50 * 10 ** (6) * T9 ** (3) + 4.13 * 10 ** (7) * T9 ** (4) - 3.90 * 10 ** (8) * T9 ** (5))) / (N_a)
        return ((2.43 * 10 ** 9 * T9 ** (-2 / 3) * np.exp(-13.490 * T9 ** (-1 / 3) - (T9 / 0.15) ** 2) * (1 + 74.5 * T9) + 6.09 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-1.054 / T9)) * 2.42 * 10 ** (-12) * (1 - 1.52 * np.log10(T9) + 0.448 * (np.log10(T9)) ** (2) + 0.435 * (np.log10(T9)) ** 3)) / (N_a)
    return -1


def process_12(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'He4', 'He4', 'He4'} and {Res1, Res2, Res3, Res4} == {'C12', '0', '0', '0'}:
        if T9 <= 0.03:
            return ((2.43 * 10 ** 9 * T9 ** (-2 / 3) * np.exp(-13.490 * T9 ** (-1 / 3) - (T9 / 0.15) ** 2) * (1 + 74.5 * T9) + 6.09 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-1.054 / T9)) * (2.76 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-23.570 * T9 ** (-1 / 3) - (T9 / 0.4) ** 2) * (1 + 5.47 * T9 + 326 * T9 ** 2) + 130.7 * T9 ** (-3 / 2) * np.exp(-3.338 / T9) + 2.51 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-20.307 / T9)) * 3.07 * 10 ** (-16) * (1 - 29.1 * T9 + 1308 * T9 ** (2))) / (N_a ** 2)
        return ((2.43 * 10 ** 9 * T9 ** (-2 / 3) * np.exp(-13.490 * T9 ** (-1 / 3) - (T9 / 0.15) ** 2) * (1 + 74.5 * T9) + 6.09 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-1.054 / T9)) * (2.76 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-23.570 * T9 ** (-1 / 3) - (T9 / 0.4) ** 2) * (1 + 5.47 * T9 + 326 * T9 ** 2) + 130.7 * T9 ** (-3 / 2) * np.exp(-3.338 / T9) + 2.51 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-20.307 / T9)) * 3.44 * 10 ** (-16) * (1 + 0.0158 * T9 ** (-0.65))) / (N_a ** 2)
    return -1


def process_13(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Li6', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Be7', '0', '0', '0'}:
        if T9 <= 0:
            return (1.25 * 10 ** 6 * T9 ** (-2 / 3) * np.exp(-8.415 * T9 ** (-1 / 3)) * (1 - 0.252 * T9 + 5.19 * 10 ** (-2) * T9 ** 2 - 2.92 * 10 ** (-3) * T9 ** 3)) / (N_a)
        return (1.25 * 10 ** 6 * T9 ** (-2 / 3) * np.exp(-8.415 * T9 ** (-1 / 3)) * (1 - 0.252 * T9 + 5.19 * 10 ** (-2) * T9 ** 2 - 2.92 * 10 ** (-3) * T9 ** 3)) / (N_a)
    return -1


def process_14(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Li6', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'He4', 'He3', '0', '0'}:
        if T9 <= 0:
            return (3.54 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-8.415 * T9 ** (-1 / 3)) * (1 - 0.137 * T9 + 2.41 * 10 ** (-2) * T9 ** 2 - 1.28 * 10 ** (-3) * T9 ** 3)) / N_a
        return (3.54 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-8.415 * T9 ** (-1 / 3)) * (1 - 0.137 * T9 + 2.41 * 10 ** (-2) * T9 ** 2 - 1.28 * 10 ** (-3) * T9 ** 3)) / N_a
    return -1


def process_15(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Li7', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'He4', 'He4', '0', '0'}:
        if T9 <= 0:
            return ((7.20 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-8.473 * T9 ** (-1 / 3) - (T9 / 6.5) ** 2) * (1 + 1.05 * T9 - 0.653 * T9 ** 2 + 0.185 * T9 ** 3 - 2.12 * 10 ** (-2) * T9 ** 4 + 9.30 * 10 ** (-4) * T9 ** 5) + 9.85 * 10 ** 6 * T9 ** (-0.576) * np.exp(-10.415 / T9)) + ((1.75 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-8.473 * T9 ** (-1 / 3) - (T9 / 0.8) ** 2) * (1 - 1.47 * T9 + 4.43 * T9 ** 2) + 1.60 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-4.441 / T9) + 4.32 * 10 ** 4 * T9 ** (0.309) * np.exp(-2.811 / T9)))) / N_a
        return ((7.20 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-8.473 * T9 ** (-1 / 3) - (T9 / 6.5) ** 2) * (1 + 1.05 * T9 - 0.653 * T9 ** 2 + 0.185 * T9 ** 3 - 2.12 * 10 ** (-2) * T9 ** 4 + 9.30 * 10 ** (-4) * T9 ** 5) + 9.85 * 10 ** 6 * T9 ** (-0.576) * np.exp(-10.415 / T9)) + ((1.75 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-8.473 * T9 ** (-1 / 3) - (T9 / 0.8) ** 2) * (1 - 1.47 * T9 + 4.43 * T9 ** 2) + 1.60 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-4.441 / T9) + 4.32 * 10 ** 4 * T9 ** (0.309) * np.exp(-2.811 / T9)))) / N_a
    return -1


def process_16(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Li7', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'B11', '0', '0', '0'}:
        if T9 <= 0:
            return (9.72 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-19.163 * T9 ** (-1 / 3) - (T9 / 0.4) ** 2) * (1 + 2.84 * T9 - 7.89 * T9 ** 2) + 3.35 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-2.959 / T9) + 1.04 * 10 ** 4 * T9 ** (-0.023) * np.exp(-4.922 / T9)) / N_a
        return (9.72 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-19.163 * T9 ** (-1 / 3) - (T9 / 0.4) ** 2) * (1 + 2.84 * T9 - 7.89 * T9 ** 2) + 3.35 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-2.959 / T9) + 1.04 * 10 ** 4 * T9 ** (-0.023) * np.exp(-4.922 / T9)) / N_a
    return -1


def process_17(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Li7', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'H1', 'B10', '0', '0'}:
        if T9 <= 0:
            return (1.66 * 10 ** 7 * np.exp(-32.371 / T9) * (1 + 1.064 * T9)) / N_a
        return (1.66 * 10 ** 7 * np.exp(-32.371 / T9) * (1 + 1.064 * T9)) / N_a
    return -1


def process_18(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Be7', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'He4', 'He4', '0', '0'}:
        if T9 <= 0:
            return (2.61 * 10 ** 5 * T9 ** (-2 / 3) * np.exp(-10.264 * T9 ** (-1 / 3)) * (1 - 5.11 * 10 ** (-2) * T9 + 4.68 * 10 ** (-2) * T9 ** 2 - 6.60 * 10 ** (-3) * T9 ** 3 + 3.12 * 10 ** (-4) * T9 ** 4) + 2.05 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-7.345 / T9)) / N_a
        return (2.61 * 10 ** 5 * T9 ** (-2 / 3) * np.exp(-10.264 * T9 ** (-1 / 3)) * (1 - 5.11 * 10 ** (-2) * T9 + 4.68 * 10 ** (-2) * T9 ** 2 - 6.60 * 10 ** (-3) * T9 ** 3 + 3.12 * 10 ** (-4) * T9 ** 4) + 2.05 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-7.345 / T9)) / N_a
    return -1


def process_19(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Be7', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'B11', '0', '0', '0'}:
        if T9 <= 2:
            return (1.29 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-23.214 * T9 ** (-1 / 3) - (T9 / 0.8) ** 2) * (1 - 6.47 * T9 + 19.5 * T9 ** 2 - 19.3 * T9 ** 3) + 1.25 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-6.498 / T9) + 1.44 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-10.177 / T9) + 1.63 * 10 ** 4 * T9 ** (0.178) * np.exp(-15.281 / T9)) / N_a
        return (1.41 * 10 ** 3 * T9 ** 0.636 * np.exp(-3.015 / T9)) / N_a
    return -1


def process_20(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Be9', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'B10', '0', '0', '0'}:
        if T9 <= 0:
            return (1.36 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-10.361 * T9 ** (-1 / 3) - (T9 / 1.5) ** 2) * (1 + 2.71 * T9 - 1.95 * T9 ** 2 + 0.594 * T9 ** 3) + 4.80 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-3.102 / T9) + 2.75 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-10.615 / T9)) / N_a
        return (1.36 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-10.361 * T9 ** (-1 / 3) - (T9 / 1.5) ** 2) * (1 + 2.71 * T9 - 1.95 * T9 ** 2 + 0.594 * T9 ** 3) + 4.80 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-3.102 / T9) + 2.75 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-10.615 / T9)) / N_a
    return -1


def process_21(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Be9', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'He4', 'He4', 'H1', 'H1'}:
        if T9 <= 0:
            return (5.06 * 10 ** 7 * np.exp(-21.474 / T9) * (1 + 1.26 * T9 - 0.0302 * T9 ** 2)) / (N_a)
        return (5.06 * 10 ** 7 * np.exp(-21.474 / T9) * (1 + 1.26 * T9 - 0.0302 * T9 ** 2)) / (N_a)
    return -1


def process_22(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Be9', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'He4', 'He4', 'H2', '0'}:
        if T9 <= 0:
            return (2.18 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-10.361 * T9 ** (-1 / 3) - (T9 / 0.42) ** 2) * (1 - 0.427 * T9 + 34.055 * T9 ** 2) + 6.24 * 10 ** 8 * T9 ** (-3 / 2) * np.exp(-3.446 / T9) + 3.53 * 10 ** 8 * T9 ** (-0.205) * np.exp(-3.889 / T9)) / (N_a)
        return (2.18 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-10.361 * T9 ** (-1 / 3) - (T9 / 0.42) ** 2) * (1 - 0.427 * T9 + 34.055 * T9 ** 2) + 6.24 * 10 ** 8 * T9 ** (-3 / 2) * np.exp(-3.446 / T9) + 3.53 * 10 ** 8 * T9 ** (-0.205) * np.exp(-3.889 / T9)) / (N_a)
    return -1


def process_23(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Be9', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Li6', 'He4', '0', '0'}:
        if T9 <= 0:
            return (2.11 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-10.361 * T9 ** (-1 / 3) - (T9 / 0.4) ** 2) * (1 - 0.189 * T9 + 35.2 * T9 ** 2) + 5.24 * 10 ** 8 * T9 ** (-3 / 2) * np.exp(-3.446 / T9) + 4.65 * 10 ** 8 * T9 ** (-0.293) * np.exp(-4.396 / T9)) / (N_a)
        return (2.11 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-10.361 * T9 ** (-1 / 3) - (T9 / 0.4) ** 2) * (1 - 0.189 * T9 + 35.2 * T9 ** 2) + 5.24 * 10 ** 8 * T9 ** (-3 / 2) * np.exp(-3.446 / T9) + 4.65 * 10 ** 8 * T9 ** (-0.293) * np.exp(-4.396 / T9)) / (N_a)
    return -1


def process_24(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Be9', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'C12', 'H1', '0', '0'}:
        if T9 <= 0:
            return (5.00 * 10 ** 13 * T9 ** (-2 / 3) * np.exp(-23.872 * T9 ** (-1 / 3) - (T9 / 0.154) ** 2) * (1 + 27.3 * T9 + 1632 * T9 ** 2) + 0.70 * T9 ** (-3 / 2) * np.exp(-1.832 / T9) + 1.77 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-4.385 / T9) + 4.12 * 10 ** 7 * T9 ** 0.65 * np.exp(-10.060 / T9)) / (N_a)
        return (5.00 * 10 ** 13 * T9 ** (-2 / 3) * np.exp(-23.872 * T9 ** (-1 / 3) - (T9 / 0.154) ** 2) * (1 + 27.3 * T9 + 1632 * T9 ** 2) + 0.70 * T9 ** (-3 / 2) * np.exp(-1.832 / T9) + 1.77 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-4.385 / T9) + 4.12 * 10 ** 7 * T9 ** 0.65 * np.exp(-10.060 / T9)) / (N_a)
    return -1


def process_25(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'B10', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'B11', '0', '0', '0'}:
        if T9 <= 0:
            return (1.68 * 10 ** 6 * T9 ** (-2 / 3) * np.exp(-12.064 * T9 ** (-1 / 3)) * (((T9 ** (2 / 3) - 0.0273) ** 2 + 4.69 * 10 ** (-4)) ** (-1)) * (1 + 0.977 * T9 + 1.87 * T9 ** 2 - 0.272 * T9 ** 3 + 1.30 * 10 ** (-2) * T9 ** 4)) / N_a
        return (1.68 * 10 ** 6 * T9 ** (-2 / 3) * np.exp(-12.064 * T9 ** (-1 / 3)) * (((T9 ** (2 / 3) - 0.0273) ** 2 + 4.69 * 10 ** (-4)) ** (-1)) * (1 + 0.977 * T9 + 1.87 * T9 ** 2 - 0.272 * T9 ** 3 + 1.30 * 10 ** (-2) * T9 ** 4)) / N_a
    return -1


def process_26(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'B10', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Be7', 'He4', '0', '0'}:
        if T9 <= 0.8:
            return (2.56 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-12.064 * T9 ** (-1 / 3)) * (((T9 ** (2 / 3) - 0.026) ** 2 + 4.70 * 10 ** (-4)) ** (-1)) * (1 + 5.95 * T9 + 29.2 * T9 ** 2 - 316 * T9 ** 3 + 914 * T9 ** 4 - 1085 * T9 ** 5 + 465 * T9 ** 6)) / N_a
        return (1.01 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-12.064 * T9 ** (-1 / 3)) * (-1 + 15.8 * T9 - 2.60 * T9 ** 2 + 0.125 * T9 ** 3)) / N_a
    return -1


def process_27(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'B11', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'C12', '0', '0', '0'}:
        if T9 <= 0:
            return (4.58 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-12.097 * T9 ** (-1 / 3) - (T9 / 0.6) ** 2) * (1 + 0.353 * T9 + 0.842 * T9 ** 2) + 6.82 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-1.738 / T9) + 2.80 * 10 ** 4 * T9 ** (0.104) * np.exp(-3.892 / T9)) / N_a
        return (4.58 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-12.097 * T9 ** (-1 / 3) - (T9 / 0.6) ** 2) * (1 + 0.353 * T9 + 0.842 * T9 ** 2) + 6.82 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-1.738 / T9) + 2.80 * 10 ** 4 * T9 ** (0.104) * np.exp(-3.892 / T9)) / N_a
    return -1


def process_28(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'B11', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'B11', 'H1', '0', '0'}:
        if T9 <= 0:
            return (1.36 * 10 ** 8 * np.exp(-32.085 / T9) * (1 + 0.963 * T9 - 0.285 * T9 ** 2 + 3.36 * 10 ** (-2) * T9 ** 3 - 1.37 * 10 ** (-3) * T9 ** 4)) / N_a
        return (1.36 * 10 ** 8 * np.exp(-32.085 / T9) * (1 + 0.963 * T9 - 0.285 * T9 ** 2 + 3.36 * 10 ** (-2) * T9 ** 3 - 1.37 * 10 ** (-3) * T9 ** 4)) / N_a
    return -1


def process_29(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'B11', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'He4', 'He4', 'He4', '0'}:
        if T9 <= 2:
            return (2.68 * 10 ** 12 * T9 ** (-2 / 3) * np.exp(-12.097 * T9 ** (-1 / 3)) * (1 + 1.62 * T9 - 1.31 * T9 ** 2 + 0.260 * T9 ** 3) + 2.12 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-1.724 / T9)) / N_a
        return (5.84 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-12.097 * T9 ** (-1 / 3)) * (((T9 ** (2 / 3) - 1.47) ** 2 + 0.187) ** (-1)) * (-1 + 0.883 * T9 + 0.012 * T9 ** 2)) / N_a
    return -1


def process_30(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'C12', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'C13', '0', '0', '0'}:
        if T9 <= 0:
            return (2.00 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-13.692 * T9 ** (-1 / 3) - (T9 / 0.46) ** 2) * (1 + 9.89 * T9 - 59.8 * T9 ** 2 + 266 * T9 ** 3) + 1.00 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-4.913 / T9) + 4.24 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-21.62 / T9)) / N_a
        return (2.00 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-13.692 * T9 ** (-1 / 3) - (T9 / 0.46) ** 2) * (1 + 9.89 * T9 - 59.8 * T9 ** 2 + 266 * T9 ** 3) + 1.00 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-4.913 / T9) + 4.24 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-21.62 / T9)) / N_a
    return -1


def process_31(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'C12', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'O16', '0', '0', '0'}:
        if T9 <= 0:
            return ((6.66 * 10 ** 7 * T9 ** (-2) * np.exp(-32.123 * T9 ** (-1 / 3) - (T9 / 4.6) ** 2) * (1 + 2.54 * T9 + 1.04 * T9 ** 2 - 0.226 * T9 ** 3) + 1.39 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-28.930 / T9)) + (6.56 * 10 ** 7 * T9 ** (-2) * np.exp(-32.123 * T9 ** (-1 / 3) - (T9 / 1.3) ** 2) * (1 + 9.23 * T9 - 13.7 * T9 ** 2 + 7.4 * T9 ** 3)) + (19.2 * T9 ** 2 * np.exp(-26.9 / T9))) / N_a
        return ((6.66 * 10 ** 7 * T9 ** (-2) * np.exp(-32.123 * T9 ** (-1 / 3) - (T9 / 4.6) ** 2) * (1 + 2.54 * T9 + 1.04 * T9 ** 2 - 0.226 * T9 ** 3) + 1.39 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-28.930 / T9)) + (6.56 * 10 ** 7 * T9 ** (-2) * np.exp(-32.123 * T9 ** (-1 / 3) - (T9 / 1.3) ** 2) * (1 + 9.23 * T9 - 13.7 * T9 ** 2 + 7.4 * T9 ** 3)) + (19.2 * T9 ** 2 * np.exp(-26.9 / T9))) / N_a
    return -1


def process_32(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'C13', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'N14', '0', '0', '0'}:
        if T9 <= 0:
            return (9.57 * 10 ** 7 * T9 ** (-2 / 3) * (1 + 3.56 * T9) * np.exp(-13.720 * T9 ** (-1 / 3) - T9 ** (2)) + 1.50 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-5.930 / T9) + 6.83 * 10 ** 5 * T9 ** (-0.864) * np.exp(-12.057 / T9)) / N_a
        return (9.57 * 10 ** 7 * T9 ** (-2 / 3) * (1 + 3.56 * T9) * np.exp(-13.720 * T9 ** (-1 / 3) - T9 ** (2)) + 1.50 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-5.930 / T9) + 6.83 * 10 ** 5 * T9 ** (-0.864) * np.exp(-12.057 / T9)) / N_a
    return -1


def process_33(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'C13', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'C13', 'H1', '0', '0'}:
        if T9 <= 0:
            return (1.18 * 10 ** 8 * np.exp(-34.846 / T9) * (1 + 0.336 * T9 - 3.79 * 10 ** (-2) * T9 ** 2 + 2.02 * 10 ** (-3) * T9 ** 3)) / N_a
        return (1.18 * 10 ** 8 * np.exp(-34.846 / T9) * (1 + 0.336 * T9 - 3.79 * 10 ** (-2) * T9 ** 2 + 2.02 * 10 ** (-3) * T9 ** 3)) / N_a
    return -1


def process_34(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'C13', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'O16', 'H1', '0', '0'}:
        if T9 <= 4:
            return (3.78 * 10 ** 14 * T9 ** 2 * np.exp(-32.333 * T9 ** (-1 / 3) - (T9 / 0.71) ** 2) * (1 + 46.8 * T9 - 292 * T9 ** 2 + 738 * T9 ** 3) + 2.30 * 10 ** 7 * T9 ** (0.45) * np.exp(-13.03 / T9)) / N_a
        return (7.59 * 10 ** 6 * T9 ** 1.078 * np.exp(-12.056 / T9)) / N_a
    return -1


def process_35(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N13', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'O14', '0', '0', '0'}:
        if T9 <= 0:
            return (4.02 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-15.205 * T9 ** (-1 / 3) - (T9 / 0.54) ** 2) * (1 + 3.81 * T9 + 18.6 * T9 ** 2 + 32.3 * T9 ** 3) + 3.25 * 10 ** 5 * T9 ** (-1.35) * np.exp(-5.926 / T9)) / N_a
        return (4.02 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-15.205 * T9 ** (-1 / 3) - (T9 / 0.54) ** 2) * (1 + 3.81 * T9 + 18.6 * T9 ** 2 + 32.3 * T9 ** 3) + 3.25 * 10 ** 5 * T9 ** (-1.35) * np.exp(-5.926 / T9)) / N_a
    return -1


def process_36(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N14', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'N15', '0', '0', '0'}:
        if T9 <= 0:
            return (4.83 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-15.231 * T9 ** (-1 / 3) - (T9 / 0.8) ** 2) * (1 - 2.00 * T9 + 3.41 * T9 ** 2 - 2.43 * T9 ** 3) + 2.36 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-3.010 / T9) + 6.72 * 10 ** 3 * T9 ** (0.380) * np.exp(-9.530 / T9)) / N_a
        return (4.83 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-15.231 * T9 ** (-1 / 3) - (T9 / 0.8) ** 2) * (1 - 2.00 * T9 + 3.41 * T9 ** 2 - 2.43 * T9 ** 3) + 2.36 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-3.010 / T9) + 6.72 * 10 ** 3 * T9 ** (0.380) * np.exp(-9.530 / T9)) / N_a
    return -1


def process_37(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N14', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'O14', 'H1', '0', '0'}:
        if T9 <= 0:
            return (6.40 * 10 ** 5 * np.exp(-68.761 / T9) * (-1 + 8.74 * T9 - 0.431 * T9 ** 2)) / N_a
        return (6.40 * 10 ** 5 * np.exp(-68.761 / T9) * (-1 + 8.74 * T9 - 0.431 * T9 ** 2)) / N_a
    return -1


def process_38(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N14', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'B11', 'He4', '0', '0'}:
        if T9 <= 0:
            return (3.01 * 10 ** 16 * np.exp(-31.884 * T9 ** (-1 / 3) - 33.920 / T9) * np.exp(-1.379 * T9 + 0.215 * T9 ** 2 - 2.13 * 10 ** (-2) * T9 ** 3 + 8.00 * 10 ** (-4) * T9 ** 4)) / N_a
        return (3.01 * 10 ** 16 * np.exp(-31.884 * T9 ** (-1 / 3) - 33.920 / T9) * np.exp(-1.379 * T9 + 0.215 * T9 ** 2 - 2.13 * 10 ** (-2) * T9 ** 3 + 8.00 * 10 ** (-4) * T9 ** 4)) / N_a
    return -1


def process_39(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N14', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'F18', '0', '0', '0'}:
        if T9 <= 2:
            return (7.93 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-36.035 * T9 ** (-1 / 3) - (T9 / 0.07) ** 2) + 1.85 * 10 ** (-10) * T9 ** (-3 / 2) * np.exp(-2.750 / T9) + 2.62 * T9 ** (-3 / 2) * np.exp(-5.045 / T9) + 2.93 * 10 ** 3 * T9 ** 0.344 * np.exp(-10.561 / T9)) / N_a
        return (1.52 * 10 ** 2 * T9 ** 1.567 * np.exp(-6.315 / T9)) / N_a
    return -1


def process_40(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N14', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'O17', 'H1', '0', '0'}:
        if T9 <= 0:
            return (1.38 * 10 ** 8 * T9 ** (0.053) * np.exp(-55.0 / T9)) / N_a
        return (1.38 * 10 ** 8 * T9 ** (0.053) * np.exp(-55.0 / T9)) / N_a
    return -1


def process_41(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N15', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'O16', '0', '0', '0'}:
        if T9 <= 3.5:
            return (1.08 * 10 ** 9 * T9 ** (-2 / 3) * np.exp(-15.254 * T9 ** (-1 / 3) - (T9 / 0.34) ** 2) * (1 + 6.15 * T9 + 16.4 * T9 ** 2) + 9.23 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-3.597 / T9) + 3.27 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-11.024 / T9)) / N_a
        return (3.54 * 10 ** 4 * T9 ** 0.095 * np.exp(-2.306 / T9)) / N_a
    return -1


def process_42(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N15', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'O15', 'H1', '0', '0'}:
        if T9 <= 0:
            return (1.16 * 10 ** 8 * np.exp(-41.037 / T9) * (1 + 0.219 * T9 - 0.029 * T9 ** 2 + 1.73 * 10 ** (-3) * T9 ** 3)) / N_a
        return (1.16 * 10 ** 8 * np.exp(-41.037 / T9) * (1 + 0.219 * T9 - 0.029 * T9 ** 2 + 1.73 * 10 ** (-3) * T9 ** 3)) / N_a
    return -1


def process_43(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N15', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'C12', 'He4', '0', '0'}:
        if T9 <= 2.5:
            return (1.12 * 10 ** 12 * T9 ** (-2 / 3) * np.exp(-15.253 * T9 ** (-1 / 3) - (T9 / 0.28) ** 2) * (1 + 4.95 * T9 + 143 * T9 ** 2) + 1.01 * 10 ** 8 * T9 ** (-3 / 2) * np.exp(-3.643 / T9) + 1.19 * 10 ** 9 * T9 ** (-3 / 2) * np.exp(-7.406 / T9)) / N_a
        return (4.17 * 10 ** 7 * T9 ** 0.917 * np.exp(-3.292 / T9)) / N_a
    return -1


def process_44(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'N15', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'F19', '0', '0', '0'}:
        if T9 <= 0:
            return (1.10 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-36.214 * T9 ** (-1 / 3) - (T9 / 0.6) ** 2) + 1.65 * 10 ** (-4) * T9 ** (-3 / 2) * np.exp(-4.224 / T9) + 2.66 * T9 ** (-3 / 2) * np.exp(-6.220 / T9) + 1.56 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-7.764 / T9) + 3.92 * 10 ** 4 * T9 ** (-0.333) * np.exp(-14.522 / T9)) / N_a
        return (1.10 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-36.214 * T9 ** (-1 / 3) - (T9 / 0.6) ** 2) + 1.65 * 10 ** (-4) * T9 ** (-3 / 2) * np.exp(-4.224 / T9) + 2.66 * T9 ** (-3 / 2) * np.exp(-6.220 / T9) + 1.56 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-7.764 / T9) + 3.92 * 10 ** 4 * T9 ** (-0.333) * np.exp(-14.522 / T9)) / N_a
    return -1


def process_45(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O16', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'O17', '0', '0', '0'}:
        if T9 <= 0:
            return (7.37 * 10 ** 7 * np.exp(-16.696 * T9 ** (-1 / 3)) * T9 ** (-0.82)) / N_a
        return (7.37 * 10 ** 7 * np.exp(-16.696 * T9 ** (-1 / 3)) * T9 ** (-0.82)) / N_a
    return -1


def process_46(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O16', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Ne20', '0', '0', '0'}:
        if T9 <= 0:
            return (2.68 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-39.760 * T9 ** (-1 / 3) - (T9 / 1.6) ** 2) + 51.1 * T9 ** (-3 / 2) * np.exp(-10.32 / T9) + 616.1 * T9 ** (-3 / 2) * np.exp(-12.200 / T9) + 0.41 * T9 ** 2.966 * np.exp(-11.900 / T9)) / (N_a)
        return (2.68 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-39.760 * T9 ** (-1 / 3) - (T9 / 1.6) ** 2) + 51.1 * T9 ** (-3 / 2) * np.exp(-10.32 / T9) + 616.1 * T9 ** (-3 / 2) * np.exp(-12.200 / T9) + 0.41 * T9 ** 2.966 * np.exp(-11.900 / T9)) / (N_a)
    return -1


def process_47(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O17', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'F18', '0', '0', '0'}:
        if T9 <= 3:
            return (1.50 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-16.710 * T9 ** (-1 / 3) - (T9 / 0.2) ** 2) + 9.79 * 10 ** (-6) * T9 ** (-3 / 2) * np.exp(-0.7659 / T9) + 4.15 * T9 ** (-3 / 2) * np.exp(-2.083 / T9) + 7.74 * 10 ** 4 * T9 ** 1.16 * np.exp(-6.342 / T9)) / (N_a)
        return (1.74 * 10 ** 3 * T9 ** 0.700 * np.exp(-1.072 / T9)) / (N_a)
    return -1


def process_48(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O17', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'N14', 'He4', '0', '0'}:
        if T9 <= 6:
            return (9.20 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-16.715 * T9 ** (-1 / 3) - (T9 / 0.06) ** 2) * (1 - 80.31 * T9 + 2211 * T9 ** 2) + 9.13 * 10 ** (-4) * T9 ** (-3 / 2) * np.exp(-0.7667 / T9) + 9.68 * T9 ** (-3 / 2) * np.exp(-2.083 / T9) + 8.13 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-5.685 / T9) + 1.85 * 10 ** 6 * T9 ** 1.591 * np.exp(-4.848 / T9)) / (N_a)
        return (8.73 * 10 ** 6 * T9 ** 0.950 * np.exp(-7.508 / T9)) / (N_a)
    return -1


def process_49(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O17', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Ne20', 'H1', '0', '0'}:
        if T9 <= 0:
            return (4.38 * 10 ** 17 * T9 ** (-2 / 3) * np.exp(-39.918 * T9 ** (-1 / 3) - (T9 / 1.1) ** 2) + 1.73 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-8.55 / T9) + 7.50 * 10 ** 5 * T9 ** 1.83 * np.exp(-13.8 / T9)) / (N_a)
        return (4.38 * 10 ** 17 * T9 ** (-2 / 3) * np.exp(-39.918 * T9 ** (-1 / 3) - (T9 / 1.1) ** 2) + 1.73 * 10 ** 3 * T9 ** (-3 / 2) * np.exp(-8.55 / T9) + 7.50 * 10 ** 5 * T9 ** 1.83 * np.exp(-13.8 / T9)) / (N_a)
    return -1


def process_50(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O18', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'F19', '0', '0', '0'}:
        if T9 <= 2:
            return (4.59 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-16.732 * T9 ** (-1 / 3) - (T9 / 0.15) ** 2) * (1 - 9.02 * T9 + 506 * T9 ** 2 - 2400 * T9 ** 3) + 9.91 * 10 ** (-17) * T9 ** (-3 / 2) * np.exp(-0.232 / T9) + 3.30 * 10 ** (-3) * T9 ** (-3 / 2) * np.exp(-1.033 / T9) + 1.61 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-1.665 / T9) + 1.25 * 10 ** 4 * T9 ** 0.458 * np.exp(-5.297 / T9)) / (N_a)
        return (1.38 * 10 ** 4 * T9 ** 0.829 * np.exp(-5.919 / T9)) / (N_a)
    return -1


def process_51(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O18', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'N15', 'He4', '0', '0'}:
        if T9 <= 0:
            return (5.58 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-16.732 * T9 ** (-1 / 3) - (T9 / 0.51) ** 2) * (1 + 3.2 * T9 + 21.8 * T9 ** 2) + 9.91 * 10 ** (-14) * T9 ** (-3 / 2) * np.exp(-0.232 / T9) + 2.58 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-1.665 / T9) + 3.24 * 10 ** 8 * T9 ** (-0.378) * np.exp(-6.395 / T9)) / (N_a)
        return (5.58 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-16.732 * T9 ** (-1 / 3) - (T9 / 0.51) ** 2) * (1 + 3.2 * T9 + 21.8 * T9 ** 2) + 9.91 * 10 ** (-14) * T9 ** (-3 / 2) * np.exp(-0.232 / T9) + 2.58 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-1.665 / T9) + 3.24 * 10 ** 8 * T9 ** (-0.378) * np.exp(-6.395 / T9)) / (N_a)
    return -1


def process_52(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O18', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Ne22', '0', '0', '0'}:
        if T9 <= 6:
            return (1.95 * 10 ** (-13) * T9 ** (-3 / 2) * np.exp(-2.069 / T9) + 1.56 * 10 ** (-2) * T9 ** (-3 / 2) * np.exp(-4.462 / T9) + 10.1 * T9 ** (-3 / 2) * np.exp(-6.391 / T9)) / (N_a)
        return (3.31 * 10 ** 5 * T9 ** (-0.221) * np.exp(-24.990 / T9)) / (N_a)
    return -1


def process_53(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'O18', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Ne21', 'H1', '0', '0'}:
        if T9 <= 0:
            return (49.1 * np.exp(-8.085 / T9) * (-1 + 18.7 * T9 - 85.6 * T9 ** 2 + 146.8 * T9 ** 3) + 6.94 * 10 ** 5 * T9 ** 2.24 * np.exp(-15.444 / T9)) / (N_a)
        return (49.1 * np.exp(-8.085 / T9) * (-1 + 18.7 * T9 - 85.6 * T9 ** 2 + 146.8 * T9 ** 3) + 6.94 * 10 ** 5 * T9 ** 2.24 * np.exp(-15.444 / T9)) / (N_a)
    return -1


def process_54(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'F19', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Ne20', '0', '0', '0'}:
        if T9 <= 1.5:
            return (6.37 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-18.116 * T9 ** (-1 / 3)) * (1 + 0.775 * T9 + 36.1 * T9 ** 2) + 8.27 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-3.752 / T9) + 1.28 * 10 ** 6 * T9 ** (-3.667) * np.exp(-9.120 / T9)) / (N_a)
        return (3.66 * 10 ** 3 * T9 ** 0.947 * np.exp(-2.245 / T9)) / (N_a)
    return -1


def process_55(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'F19', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'F19', 'H1', '0', '0'}:
        if T9 <= 0:
            return (4.42 * 10 ** 7 * np.exp(-46.659 / T9) * (1 + 1.19 * T9 - 0.150 * T9 ** 2 + 6.68 * 10 ** (-3) * T9 ** 3)) / (N_a)
        return (4.42 * 10 ** 7 * np.exp(-46.659 / T9) * (1 + 1.19 * T9 - 0.150 * T9 ** 2 + 6.68 * 10 ** (-3) * T9 ** 3)) / (N_a)
    return -1


def process_56(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):  # Aproximation for energies below 460 kev was found to be inaccuarte, so insteada standart non-resonant aproximation is used with emperical value of S(0) =
    if {Comp1, Comp2, Comp3} == {'F19', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'O16', 'He4', '0', '0'}:
        if T9 <= 0.7037:
            return (7.2e-19 * (1 / 2) * (2.3e+6 / (9 * 1 * 0.9565479957385183)) * (42.49 * (9 ** 2 * 1 ** 2 * 0.9565479957385183 / (T9 * 1e+3)) ** (1 / 3)) ** (2) * np.exp(-(42.49 * (9 ** 2 * 1 ** 2 * 0.9565479957385183 / (T9 * 1e+3)) ** (1 / 3))))
        return (2.62 * 10 ** 11 * T9 ** (-2 / 3) * np.exp(-18.116 * T9 ** (1 / 3) - (T9 / 0.185) ** 2) * (1 + 6.26 * 10 ** (-2) * T9 + 0.285 * T9 ** 2 + 4.94 * 10 ** (-3) * T9 ** 3 + 11.5 * T9 ** 4 + 7.40 * 10 ** 4 * T9 ** 5) + 3.80 * 10 ** 6 * T9 ** (-3 / 2) * np.exp(-3.752 / T9) + 3.27 * 10 ** 7 * T9 ** (-0.193) * np.exp(-6.587 / T9) + 7.30 * 10 ** 8 * T9 ** (-0.201) * np.exp(-16.249 / T9)) / (N_a)
    return -1


def process_57(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Ne20', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Ne21', '0', '0', '0'}:
        if T9 <= 0:
            return (2.35 * 10 ** (7) * T9 ** (-1.84) * np.exp(-19.451 * T9 ** (-1 / 3)) * (1 + 10.80 * T9) + 18.0 * T9 ** (-3 / 2) * np.exp(-4.247 / T9) + 9.83 * T9 ** (-3 / 2) * np.exp(-4.619 / T9) + 6.76 * 10 ** (4) * T9 ** (-0.641) * np.exp(-11.922 / T9)) / (N_a)
        return (2.35 * 10 ** (7) * T9 ** (-1.84) * np.exp(-19.451 * T9 ** (-1 / 3)) * (1 + 10.80 * T9) + 18.0 * T9 ** (-3 / 2) * np.exp(-4.247 / T9) + 9.83 * T9 ** (-3 / 2) * np.exp(-4.619 / T9) + 6.76 * 10 ** (4) * T9 ** (-0.641) * np.exp(-11.922 / T9)) / (N_a)
    return -1


def process_58(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Ne20', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'O17', 'He4', '0', '0'}:
        if T9 <= 0:
            return (3.75 * 10 ** 18 * T9 ** (-2 / 3) * np.exp(-43.180 * T9 ** (-1 / 3) - 47.920 / T9) * np.exp(-1.40 * 10 ** (-3) * T9 ** 4 + 3.44 * 10 ** (-2) * T9 ** 3 - 0.278 * T9 ** 2 + 0.354 * T9)) / (N_a)
        return (3.75 * 10 ** 18 * T9 ** (-2 / 3) * np.exp(-43.180 * T9 ** (-1 / 3) - 47.920 / T9) * np.exp(-1.40 * 10 ** (-3) * T9 ** 4 + 3.44 * 10 ** (-2) * T9 ** 3 - 0.278 * T9 ** 2 + 0.354 * T9)) / (N_a)
    return -1


def process_59(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Ne20', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Mg24', '0', '0', '0'}:
        if T9 <= 1:
            return (8.72 * T9 ** (-0.532) * np.exp(-8.995 / T9)) / (N_a)
        return (3.74 * 10 ** 2 * T9 ** (2.229) * np.exp(-12.681 / T9)) / (N_a)
    return -1


def process_60(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Ne21', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Na22', '0', '0', '0'}:
        if T9 <= 0:
            return (4.68 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-19.465 * T9 ** (-1 / 3) - (T9 / 0.2) ** 2) + 8.18 * 10 ** (-4) * T9 ** (-3 / 2) * np.exp(-1.085 / T9) + 6.11 * T9 ** (-3 / 2) * np.exp(-1.399 / T9) + 1.34 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-3.009 / T9) + 1.26 * 10 ** 5 * T9 ** (-0.128) * np.exp(-4.962 / T9)) / (N_a)
        return (3.04 * 10 ** 4 * T9 ** (0.420) * np.exp(-2.650 / T9)) / (N_a)
    return -1


def process_61(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Ne21', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Mg24', 'H1', '0', '0'}:
        if T9 <= 2.5:
            return (1.00 * 10 ** 19 * T9 ** (-2 / 3) * np.exp(-46.880 * T9 ** (-1 / 3) - (T9 / 1.5) ** 2) * (1 - 0.15 * T9) + 7.00 * 10 ** 5 * T9 ** (-3 / 2) * np.exp(-16.9 / T9) + 3.7 * 10 ** 6 * T9 ** (1.61) * np.exp(-20.20 / T9)) / (N_a)
        return (7.50 * 10 ** 6 * T9 ** (1.511) * np.exp(-21.764 / T9)) / (N_a)
    return -1


def process_62(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Ne22', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Na23', '0', '0', '0'}:
        if T9 <= 2:
            return (1.11 * 10 ** (-9) * T9 ** (-3 / 2) * np.exp(-0.422 / T9) + 6.83 * 10 ** (-5) * T9 ** (-3 / 2) * np.exp(-0.810 / T9) + 9.76 * 10 ** (-3) * T9 ** (-3 / 2) * np.exp(-1.187 / T9) + 1.06 * 10 ** (-1) * T9 ** (-3 / 2) * np.exp(-1.775 / T9) + 8.51 * 10 ** 4 * T9 ** (0.725) * np.exp(-4.315 / T9)) / (N_a)
        return (6.30 * 10 ** 4 * T9 ** (0.816) * np.exp(-3.910 / T9)) / (N_a)
    return -1


def process_63(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Ne22', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Mg26', '0', '0', '0'}:
        if T9 <= 1.25:
            return (3.55 * 10 ** (-9) * T9 ** (-3 / 2) * np.exp(-3.927 / T9) + 7.07 * 10 ** (-1) * T9 ** (-1.064) * np.exp(-7.759 / T9) + 1.27 * 10 ** (-3) * T9 ** (-2.556) * np.exp(-6.555 / T9)) / (N_a)
        return (1.76 * T9 ** (3.322) * np.exp(-12.412 / T9)) / (N_a)
    return -1


def process_64(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Ne22', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Mg25', 'H1', '0', '0'}:
        if T9 <= 2:
            return (7.40 * np.exp(-7.79 / T9) + 1.30 * 10 ** (-4) * T9 ** (0.83) * np.exp(-5.52 / T9) + 9.41 * 10 ** 3 * T9 ** (2.78) * np.exp(-11.7 / T9) + 8.59 * 10 ** 6 * T9 ** (0.892) * np.exp(-24.4 / T9)) / (N_a)
        return (1.51 * 10 ** 5 * T9 ** (2.879) * np.exp(-16.717 / T9)) / (N_a)
    return -1


def process_65(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Na22', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Na23', '0', '0', '0'}:
        if T9 <= 1:
            return (1.12 * 10 ** (-10) * T9 ** (-3 / 2) * np.exp(-0.483 / T9) + 4.51 * 10 ** (-7) * T9 ** (-3 / 2) * np.exp(-0.715 / T9) + 2.80 * 10 ** (2) * T9 ** (-3 / 2) * np.exp(-2.369 / T9) + 4.5 * 10 ** (3) * T9 ** (0.152) * np.exp(-2.775 / T9)) / (N_a)
        return (7.55 * 10 ** (3) * T9 ** (0.744) * np.exp(-3.299 / T9)) / (N_a)
    return -1


def process_66(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Na23', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Mg24', '0', '0', '0'}:
        if T9 <= 5:
            return (9.55 * 10 ** 7 * T9 ** (-2 / 3) * np.exp(-20.770 * T9 ** (-1 / 3) - (T9 / 0.3) ** 2) * (1 - 10.80 * T9 + 61.08 * T9 ** 2) + 8.20 * 10 ** (-2) * T9 ** (-3 / 2) * np.exp(-1.601 / T9) + 85.2 * T9 ** (-3 / 2) * np.exp(-2.808 / T9) + 1.70 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-3.458 / T9) + 5.94 * 10 ** 4 * np.exp(-5.734 / T9)) / (N_a)
        return (5.60 * 10 ** 3 * T9 ** (1.112) * np.exp(-2.337 / T9)) / (N_a)
    return -1


def process_67(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Na23', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Mg23', 'H1', '0', '0'}:
        if T9 <= 0:
            return (2.26 * 10 ** 8 * np.exp(-56.156 / T9) * (1 + 0.071 * T9 - 2.26 * 10 ** (-3) * T9 ** 2)) / (N_a)
        return (2.26 * 10 ** 8 * np.exp(-56.156 / T9) * (1 + 0.071 * T9 - 2.26 * 10 ** (-3) * T9 ** 2)) / (N_a)
    return -1


def process_68(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Na23', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Ne20', 'He4', '0', '0'}:
        if T9 <= 5:
            return (8.39 * 10 ** 9 * T9 ** (-2 / 3) * np.exp(-20.770 * T9 ** (-1 / 3) - (T9 / 0.1) ** 2) * (1 + 45.2 * T9) + 3.09 * 10 ** (-13) * T9 ** (-3 / 2) * np.exp(-0.420 / T9) + 8.12 * 10 ** (-3) * T9 ** (-3 / 2) * np.exp(-1.601 / T9) + 4.37 * T9 ** (-3 / 2) * np.exp(-1.934 / T9) + 7.50 * 10 ** 3 * T9 ** (-1.48) * np.exp(-3.150 / T9) + 1.05 * 10 ** 6 * T9 ** (1.456) * np.exp(-4.482 / T9)) / (N_a)
        return (3.96 * 10 ** 6 * T9 ** (1.291) * np.exp(-9.277 / T9)) / (N_a)
    return -1


def process_69(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Na23', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Al26g', 'H1', '0', '0'}:
        if T9 <= 0:
            return ((2.74 * 10 ** 6 * T9 ** (-2 / 3) * np.exp(-34.440 / T9) * (1 + 2.86 * T9 + 0.38 * T9 ** 2 - 3.00 * 10 ** (-2) * T9 ** 3) + 1.45 * 10 ** 10 * T9 ** (-1.36) * np.exp(-74.00 / T9))) / (N_a)
        return ((2.74 * 10 ** 6 * T9 ** (-2 / 3) * np.exp(-34.440 / T9) * (1 + 2.86 * T9 + 0.38 * T9 ** 2 - 3.00 * 10 ** (-2) * T9 ** 3) + 1.45 * 10 ** 10 * T9 ** (-1.36) * np.exp(-74.00 / T9))) / (N_a)
    return -1


def process_70(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Na23', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Mg26', 'H1', '0', '0'}:
        if T9 <= 0:
            return (5.55 * 10 ** 2 * T9 ** (-2 / 3) * np.exp(-37.090 / T9) * (1 + 1.80 * 10 ** 3 * T9 + 5.40 * 10 ** 2 * T9 ** 2 - 1.50 * 10 ** 2 * T9 ** 3) + 1.38 * 10 ** 6 * T9 ** (1.5) * np.exp(-48.00 / T9)) / N_a
        return (5.55 * 10 ** 2 * T9 ** (-2 / 3) * np.exp(-37.090 / T9) * (1 + 1.80 * 10 ** 3 * T9 + 5.40 * 10 ** 2 * T9 ** 2 - 1.50 * 10 ** 2 * T9 ** 3) + 1.38 * 10 ** 6 * T9 ** (1.5) * np.exp(-48.00 / T9)) / N_a
    return -1


def process_71(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Mg24', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Mg25', '0', '0', '0'}:
        if T9 <= 7:
            return (5.97 * 10 ** (8) * T9 ** (-2 / 3) * np.exp(-22.023 * T9 ** (-1 / 3) - (T9 / 0.1) ** (2)) + 1.59 * 10 ** (3) * T9 ** (-3 / 2) * np.exp(-2.483 / T9) + 3.33 * 10 ** (3) * T9 ** (0.122) * np.exp(-3.981 / T9)) / (N_a)
        return (3.81 * 10 ** (1) * T9 ** (2.113) * np.exp(0.860 / T9)) / (N_a)
    return -1


def process_72(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Mg24', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Ne21', 'He4', '0', '0'}:
        if T9 <= 0:
            return (3.72 * 10 ** 16 * T9 ** (2 / 3) * np.exp(-44.480 * T9 ** (-1 / 3) - 79.897 / T9) * np.exp(1.88 * T9 - 0.516 * T9 ** 2 + 5.17 * 10 ** (-2) * T9 ** 3 - 1.86 * 10 ** (-3) * T9 ** 4)) / (N_a)
        return (3.72 * 10 ** 16 * T9 ** (2 / 3) * np.exp(-44.480 * T9 ** (-1 / 3) - 79.897 / T9) * np.exp(1.88 * T9 - 0.516 * T9 ** 2 + 5.17 * 10 ** (-2) * T9 ** 3 - 1.86 * 10 ** (-3) * T9 ** 4)) / (N_a)
    return -1


def process_73(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Mg25', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Al26g', '0', '0', '0'}:
        if T9 <= 2:
            return ((3.07 * 10 ** (-16) * T9 ** (3 / 2) * np.exp(-0.435 / T9) + 3.70 * 10 ** (-8) * T9 ** (-3 / 2) * np.exp(-0.673 / T9) + 1.60 * 10 ** (-5) * T9 ** (-3 / 2) * np.exp(-1.074 / T9) + 1.27 * 10 ** 4 * T9 ** (0.647) * np.exp(-3.055 / T9)) + (8.15 * 10 ** (-17) * T9 ** (-3 / 2) * np.exp(-0.435 / T9) + 8.68 * 10 ** (-9) * T9 ** (-3 / 2) * np.exp(-0.673 / T9) + 2.82 * 10 ** (-6) * T9 ** (-3 / 2) * np.exp(-1.074 / T9) + 3.48 * 10 ** 3 * T9 ** (1.362) * np.exp(-2.906 / T9))) / (N_a)
        return ((8.75 * 10 ** 3 * T9 * np.exp(-2.997 / T9))) / (N_a)
    return -1


def process_74(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Mg25', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Mg26', '0', '0', '0'}:
        if T9 <= 2:
            return (8.15 * 10 ** (-17) * T9 ** (-3 / 2) * np.exp(-0.435 / T9) + 8.68 * 10 ** (-9) * T9 ** (-3 / 2) * np.exp(-0.673 / T9) + 2.82 * 10 ** (-6) * T9 ** (-3 / 2) * np.exp(-1.074 / T9) + 3.48 * 10 ** 3 * T9 ** (1.362) * np.exp(-2.906 / T9)) / N_a
        return (3.91 * 10 ** 3 * T9 ** (1.262) * np.exp(-3.229 / T9)) / N_a
    return -1


def process_75(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Mg25', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Si28', 'H1', '0', '0'}:
        if T9 <= 2:
            return (3.84 * 10 ** 19 * T9 ** (-2 / 3) * np.exp(-53.415 * T9 ** (-1 / 3)) * (1 + 6.993 * 10 ** (-1) * T9 - 4.538 * 10 ** (-1) * T9 ** 2 + 8.853 * 10 ** (-2) * T9 ** 3 - 7.387 * 10 ** (-3) * T9 ** 4 + 2.276 * 10 ** (-4) * T9 ** 5)) / (N_a)
        return (5.37 * 10 ** 4 * T9 ** (2.852) * np.exp(-21.052 / T9)) / (N_a)
    return -1


def process_76(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Mg26', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Al27', '0', '0', '0'}:
        if T9 <= 3.5:
            return (8.54 * 10 ** (-12) * T9 ** (-3 / 2) * np.exp(-0.605 / T9) + 1.93 * 10 ** (-6) * T9 ** (-3 / 2) * np.exp(-1.044 / T9) + 9.67 * 10 ** (-3) * T9 ** (-3 / 2) * np.exp(-1.726 / T9) + 9.50 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-3.781 / T9) + 10.2 * T9 ** (-1.565) * np.exp(-2.521 / T9) + 7.07 * 10 ** 4 * T9 ** (0.215) * np.exp(-3.947 / T9)) / (N_a)
        return (3.95 * 10 ** 4 * T9 ** (1.068) * np.exp(-4.990 / T9)) / (N_a)
    return -1


def process_77(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Mg26', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Si29', 'H1', '0', '0'}:
        if T9 <= 2:
            return (8.09 * 10 ** 19 * T9 ** (-2 / 3) * np.exp(-53.505 * T9 ** (-1 / 3) - (T9 / 7.3) ** 2) * (1 - 0.17 * T9 + 8.9 * 10 ** (-3) * T9 ** 2) + 2.80 * 10 ** 4 * T9 ** (-0.43) * np.exp(-18.73 / T9)) / (N_a)
        return (4.92 * 10 ** 4 * T9 ** (3.117) * np.exp(-20.864 / T9)) / (N_a)
    return -1


def process_78(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Al26g', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Al27', '0', '0', '0'}:
        if T9 <= 0.9:
            return (3.54 * 10 ** (-9) * T9 ** (-3 / 2) * np.exp(-0.789 / T9) + 8.54 * 10 ** (-7) * T9 ** (-3 / 2) * np.exp(-1.079 / T9) + 10.3 * T9 ** (-3 / 2) * np.exp(-2.182 / T9) + 6.12 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-3.203 / T9) + 1.05 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-4.213 / T9)) / (N_a)
        return (1.63 * 10 ** 4 * T9 ** (0.348) * np.exp(-4.285 / T9)) / (N_a)
    return -1


def process_79(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Al26m', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Si27', '0', '0', '0'}:
        if T9 <= 0.4:
            return ((3.54 * 10 ** (-9) * T9 ** (-3 / 2) * np.exp(-0.789 / T9) + 8.54 * 10 ** (-7) * T9 ** (-3 / 2) * np.exp(-1.079 / T9) + 10.3 * T9 ** (-3 / 2) * np.exp(-2.182 / T9) + 6.12 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-3.203 / T9) + 1.05 * 10 ** 4 * T9 ** (-3 / 2) * np.exp(-4.213 / T9)) * (1 + 7.80 * np.exp(-0.854 / T9 - 0.019 * T9))) / (N_a)
        return (0) / (N_a)
    return -1


def process_80(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Al27', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Si28', '0', '0', '0'}:
        if T9 <= 6:
            return (2.51 * 10 ** (-11) * T9 ** (-3 / 2) * np.exp(-0.839 / T9) + 48.2 * T9 ** (-0.2) * np.exp(-2.223 / T9) + 1.76 * 10 ** 3 * T9 ** (1.12) * np.exp(-3.196 / T9) + 3.25 * 10 ** 4 * T9 ** (0.251) * np.exp(-5.805 / T9)) / (N_a)
        return (1.62 * 10 ** 5 * T9 ** (0.549) * np.exp(-17.222 / T9)) / (N_a)
    return -1


def process_81(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Al27', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Mg24', 'He4', '0', '0'}:
        if T9 <= 6:
            return (4.76 * 10 ** 10 * T9 ** (-2 / 3) * np.exp(-23.265 * T9 ** (-1 / 3) - (T9 / 0.15) ** 2) * (1 - 22.3 * T9 + 126.7 * T9 ** 2) + 9.65 * 10 ** (-11) * T9 ** (-3 / 2) * np.exp(-0.834 / T9) + 2.09 * 10 ** (-3) * T9 ** (-3 / 2) * np.exp(-2.269 / T9) + 1.17 * 10 ** (-2) * T9 ** (-3 / 2) * np.exp(-3.273 / T9) + 2.84 * 10 ** 4 * np.exp(-5.623 / T9) / T9 + 1.38 * 10 ** 6 * T9 * np.exp(-10.01 / T9)) / (N_a)
        return (6.02 * 10 ** 5 * T9 ** (1.862) * np.exp(-14.352 / T9)) / (N_a)
    return -1


def process_82(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Al27', 'He4', '0'} and {Res1, Res2, Res3, Res4} == {'Si30', 'H1', '0', '0'}:
        if T9 <= 3:
            return (8.15 * 10 ** 4 * np.exp(-30.667 / T9) * (1 - 1.351 * T9 + 1.086 * T9 ** 2 + 0.354 * T9 ** 3 + 0.014 * T9 ** 4 - 2.13 * 10 ** (-3) * T9 ** 5)) / (N_a)
        return (8.15 * 10 ** 4 * np.exp(-30.667 / T9) * (1 - 1.351 * T9 + 1.086 * T9 ** 2 + 0.354 * T9 ** 3 + 0.014 * T9 ** 4 - 2.13 * 10 ** (-3) * T9 ** 5) * (1 + 0.227 * np.exp(-3.588 / T9 + 0.0172 * T9))) / (N_a)
    return -1


def process_83(Comp1, Comp2, Comp3, Res1, Res2, Res3, Res4, T9):
    if {Comp1, Comp2, Comp3} == {'Si28', 'H1', '0'} and {Res1, Res2, Res3, Res4} == {'Si29', '0', '0', '0'}:
        if T9 <= 3:
            return (8.71 * 10 ** 8 * T9 ** (-2 / 3) * np.exp(-24.453 * T9 ** (-1 / 3) - (T9 / 1.1) ** 2) * (1 + 0.301 * T9 + 0.069 * T9 ** 2) + 3.37 * 10 ** 2 * T9 ** (-3 / 2) * np.exp(-4.155 / T9) + 1.14 * 10 ** 3 * T9 ** (1.654) * np.exp(-11.055 / T9)) / (N_a)
        return (32.4 * T9 ** (2.052) * np.exp(-1.525 / T9)) / (N_a)
    return -1


Processes_equations = [process_1, process_2, process_3, process_4, process_5, process_6, process_7, process_8, process_9, process_10, process_11, process_12, process_13, process_14, process_15, process_16, process_17, process_18, process_19, process_20, process_21, process_22, process_23, process_24, process_25, process_26, process_27, process_28, process_29, process_30, process_31, process_32, process_33, process_34, process_35, process_36, process_37, process_38, process_39, process_40, process_41, process_42, process_43, process_44, process_45, process_46, process_47, process_48, process_49, process_50, process_51, process_52, process_53, process_54, process_55, process_56, process_57, process_58, process_59, process_60, process_61, process_62, process_63, process_64, process_65, process_66, process_67, process_68, process_69, process_70, process_71, process_72, process_73, process_74, process_75, process_76, process_77, process_78, process_79, process_80, process_81, process_82, process_83]

def Processes_formulas_applier(Processes, T, t1):

    T9 = T / 1e+9
    for t2 in range(len(Processes_equations)):
        Result = Processes_equations[t2](Processes[0][t1], Processes[1][t1], Processes[2][t1], Processes[3][t1], Processes[4][t1], Processes[5][t1], Processes[6][t1], T9)
        if Result != -1:
            if Processes[0][t1] == Processes[1][t1] and Processes[0][t1] == Processes[2][t1]:
                return Result / 6
            elif Processes[0][t1] == Processes[1][t1]:
                return Result / 2
            else:
                return Result


def Processes_matrix_create(Elements):  # Функция для создания матрицы, хранящей информацию про процессы.
    with open("Simulation_input.txt", 'r') as f1, open("Simulation_input.txt", 'r') as f1_, open("Elements_data.txt", 'r') as f2:

        print('Creating processes matrix...')
        Processes = []
        for i in range(0, 10):
            Processes.append([])  # Элемент 1, элемент 2, элемент 3, элемент-результат 1 - 4, энергетический эффект процесса, значение <сечение * скорость>, количество процессов в единице объёма в единицу времени.
        Reaction_number = 0

        for t1 in f1_:
            if t1[:-1] == '+Processes:':
                break
        for t1 in f1_:
            if t1[:17] == '+                ' and t1[17] != ' ':
                for i in range(0, 10):
                    Processes[i].append('0')
                Processes = Read_the_process(t1, Reaction_number, Elements, Processes)
                Reaction_number += 1  # Блок, отвечающий за чтение непосредственно уравнений процессов из файла Simulation_input.txt с помощью соответствующей функции.

        print(f"Succesfully created Processes matrix with {Reaction_number} Processes.")

    return Processes


def Processes_matrix_update(Processes, T):  # Функция для обновления матрицы процессов под текущее значение температуры.

    for t1 in range(len(Processes[0])):
        Processes[8][t1] = Processes_formulas_applier(Processes, T, t1)

    return Processes


def Processes_count(Processes, Concentrations):  # Функция для подсчёта скорости протекания процессов по данным из матрицы процессов.

    for t1 in range(len(Processes[0])):
        Processes[9][t1] = 365.2421897 * 24 * 60 * 60 * Concentration_of_element(Processes[0][t1], Concentrations) * Concentration_of_element(Processes[1][t1], Concentrations) * Concentration_of_element(Processes[2][t1], Concentrations) * Processes[8][t1]

    return Processes
